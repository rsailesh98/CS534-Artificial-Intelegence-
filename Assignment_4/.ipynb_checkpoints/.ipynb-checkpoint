{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importing the required libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import itertools as it\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def accuracy_naive_bayes(naive_bayes_predictions, naive_bayes_act_class):\n",
    "    TP, TN, FP, FN = 0.0, 0.0, 0.0, 0.0\n",
    "    for p, a in it.zip_longest(naive_bayes_predictions, naive_bayes_act_class):\n",
    "        if p == 0 and a == 0:\n",
    "            TP = TP + 1\n",
    "        elif p == 1 and a == 1:\n",
    "            TN = TN + 1\n",
    "        elif p == 0 and a == 1:\n",
    "            FP = FP + 1\n",
    "        elif p == 1 and a == 0:\n",
    "            FN = FN + 1\n",
    "    pre = TP / (TP + FP)\n",
    "    rec = TP / (TP + FN)\n",
    "    f_measure = (2 * pre * rec) / (pre + rec)\n",
    "    return f_measure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The f measure score for body: 1.0\n"
     ]
    }
   ],
   "source": [
    "bod = pd.read_csv('dbworld_bodies_stemmed.csv')\n",
    "\n",
    "bod = bod.drop(columns=['id'])\n",
    "bod_train = bod.sample(frac=0.8, random_state=70)\n",
    "bod_test = bod.drop(bod_train.index)\n",
    "X_bod_train = bod_train.iloc[:, :-1].values\n",
    "y_bod_train = bod_train.iloc[:, -1].values\n",
    "X_bod_test = bod_test.iloc[:, :-1].values\n",
    "y_bod_test = bod_test.iloc[:, -1].values\n",
    "clf_bod = MultinomialNB()\n",
    "clf_bod.fit(X_bod_train, y_bod_train)\n",
    "p_bod = clf_bod.predict(X_bod_test)\n",
    "bod_f_measure = accuracy_naive_bayes(p_bod, y_bod_test)\n",
    "print (\"The f measure score for body:\",bod_f_measure)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The f measure score for subjects: 1.0\n"
     ]
    }
   ],
   "source": [
    "sub = pd.read_csv('dbworld_subjects_stemmed.csv')\n",
    "\n",
    "sub = sub.drop(columns=['id'])\n",
    "sub_train = sub.sample(frac=0.8, random_state=70)\n",
    "sub_test = sub.drop(sub_train.index)\n",
    "X_sub_train = sub_train.iloc[:, :-1].values\n",
    "y_sub_train = sub_train.iloc[:, -1].values\n",
    "X_sub_test = sub_test.iloc[:, :-1].values\n",
    "y_sub_test = sub_test.iloc[:, -1].values\n",
    "clf_sub = MultinomialNB()\n",
    "clf_sub.fit(X_sub_train, y_sub_train)\n",
    "p_sub = clf_sub.predict(X_sub_test)\n",
    "sub_f_measure = accuracy_naive_bayes(p_sub, y_sub_test)\n",
    "print (\"The f measure score for subjects:\", sub_f_measure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
